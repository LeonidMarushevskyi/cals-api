buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.4.0'
    id "org.sonarqube" version "2.2.1"
    id 'net.ltgt.apt' version '0.9'
}

project.ext {
    projectGroup = 'gov.ca.cwds.cals'
    projectDockerGroup = 'cwds'
    projectDockerAppName = 'cals-api'
    projectVersion = '1.0-SNAPSHOT'
    dropwizardVersion = '1.1.0'
    coreApiVersion = '0.20.173'
    calsModelVersion = '1.0-SNAPSHOT'
    mapstructVersion = '1.1.0.Final'
    mainClass = 'gov.ca.cwds.cals.CalsApiApplication'
}

group projectGroup
version projectVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://sonar.dev.cwds.io:8081/artifactory/repo"
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
apply plugin: "cobertura"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'com.github.johnrengelman.shadow'


sonarqube {
    properties {
        property "sonar.projectName", "${name}"
        property "sonar.projectKey", "${group}:${name}"
        property "sonar.cobertura.reportPath","$buildDir/reports/cobertura/coverage.xml"
    }
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}


dependencies {

    compile fileTree(dir: 'lib', include: ['*.jar'])

// Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
// Exclude transitive dependencies.
    compile ('gov.ca.cwds.api:api-core:' + coreApiVersion) {
        exclude group: 'org.glassfish.jersey.core'
    }

    compile (group: 'gov.ca.cwds.cals', name: 'fas-model', version: calsModelVersion)

    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

    compile (
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'org.postgresql:postgresql:9.4.1208.jre7',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion
    )
    compile 'org.mapstruct:mapstruct-jdk8:' + mapstructVersion

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.194'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    apt 'org.mapstruct:mapstruct-processor:' + mapstructVersion
}

mainClassName = mainClass

shadowJar {
    classifier = 'dist'
    baseName = 'cals-api'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainClassName
    }
    version = ''
}

run {
    args 'server', './config/cals-api.yml'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

def dockerTag = projectVersion + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')

task copyConfig(type: Copy) {
    from 'config'
    into 'build/docker/config'
}

task copyDist(type: Copy, dependsOn: shadowJar) {
    from 'build/libs'
    into 'build/docker/libs'
}


task calsApiDocker(type: Docker,  dependsOn: [copyConfig, copyDist] ) {
    dockerfile = "Dockerfile"
    project.group = projectDockerGroup
    applicationName = projectDockerAppName
    tagVersion = version + ((System.properties.getProperty('BUILD_ID') != null ) ? '.' + System.properties.getProperty('BUILD_ID') : '')
}

task createDockerImage(type:Exec, dependsOn: shadowJar) {
    commandLine 'docker',  'build',  '-t',  'cwds/cals-api', '.'
}

task tagDockerImage(type:Exec, dependsOn: createDockerImage) {
    commandLine 'docker',  'tag',  'cwds/cals-api',  "cwds/cals-api:$dockerTag"
}

task pushDockerLatest(type:Exec, dependsOn: createDockerImage) {
    commandLine 'docker',  'push',  'cwds/cals-api:latest'
}

task pushDockerVersionTagged(type:Exec, dependsOn: tagDockerImage) {
    commandLine 'docker',  'push',  "cwds/cals-api:$dockerTag"
}

task dropDockerImage(type:Exec) {
    commandLine 'docker',  'rmi',  "cwds/cals-api:$dockerTag"
    commandLine 'docker',  'rmi',  "cwds/cals-api:latest"

}

task publishDocker(dependsOn: [pushDockerVersionTagged, pushDockerLatest]) {
    doLast {
        println 'Published'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}



