import static org.gradle.api.logging.LogLevel.*
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "org.sonarqube" version "2.2.1"
    id 'net.ltgt.apt' version '0.9'
    id "net.foragerr.jmeter" version "1.0.7-3.0-BETA"
}

project.logging.setLevelInternal(INFO)

project.ext {
    projectGroup = 'gov.ca.cwds.cals'
    projectDockerGroup = 'cwds'
    projectDockerAppName = 'cals-api'
    projectVersion = '3.1-SNAPSHOT'
    dropwizardVersion = '1.1.0'
    coreApiVersion = '0.21.216'
    calsModelVersion = '3.1-SNAPSHOT'
    mapstructVersion = '1.1.0.Final'
    mainClass = 'gov.ca.cwds.cals.CalsApiApplication'
}

group projectGroup
version projectVersion

repositories {
    mavenLocal()
    maven {
        url "http://sonar.dev.cwds.io:8081/artifactory/repo"
    }
}

apply plugin: "jacoco"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'


sonarqube {
    properties {
        property "sonar.projectName", "${name}"
        property "sonar.projectKey", "${group}:${name}"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", "src/main/java/gov/ca/cwds/cals/persistence/model/cms/rs/**, src/main/java/gov/ca/cwds/cals/persistence/model/calsns/**, src/test/resources/liquibase/cms/dml/*.xml, src/test/resources/liquibase/fas/dml/*.xml, src/test/resources/liquibase/lis/dml/*.xm
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${project.buildDir}/jacocoHtml"
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/hibernate/*'
            ])
        })
    }
}


jmeter {
    jmLog = file("${project.buildDir}/jmeter/jmeter.log")
}


configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    compile fileTree(dir: 'lib', include: ['*.jar'])

// Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
// Exclude transitive dependencies.

    compile (group: 'gov.ca.cwds.api', name: 'api-core', version: coreApiVersion , changing: true) {
        exclude group: 'org.glassfish.jersey.core'
    }

    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

    compile (
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'org.postgresql:postgresql:9.4.1208.jre7',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion
    )
    compile 'org.mapstruct:mapstruct-jdk8:' + mapstructVersion
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

    testCompile (group: 'gov.ca.cwds.cals', name: 'fas-data-model', version: calsModelVersion, changing: true)
    testCompile (group: 'gov.ca.cwds.cals', name: 'cws-cms-data-model', version: calsModelVersion, changing: true)
    testCompile (group: 'gov.ca.cwds.cals', name: 'lis-data-model', version: calsModelVersion, changing: true)
    testCompile (group: 'gov.ca.cwds.cals', name: 'cals-ns-data-model', version: calsModelVersion, changing: true)

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.194'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    apt 'org.mapstruct:mapstruct-processor:' + mapstructVersion
}

mainClassName = mainClass

shadowJar {
    classifier = 'dist'
    baseName = 'cals-api'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainClassName
    }
    version = ''
}

run {
    args 'server', './config/cals-api.yml'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

def dockerTag = projectVersion + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')

task integrationTest(type: Test, dependsOn: testClasses) {

    // URL where integration tests will be pointed to (may change it in gradle.properties)
    systemProperty 'cals.api.url', project.property('cals.api.url')

}

task copyConfig(type: Copy) {
    from 'config'
    into 'build/docker/config'
}

task copyDist(type: Copy, dependsOn: shadowJar) {
    from 'build/libs'
    into 'build/docker/libs'
}


task calsApiDocker(type: Docker,  dependsOn: [copyConfig, copyDist] ) {
    dockerfile = "Dockerfile"
    project.group = projectDockerGroup
    applicationName = projectDockerAppName
    tagVersion = version + ((System.properties.getProperty('build') != null ) ? '.' + System.properties.getProperty('build') : '')
}

task createDockerImage(type:Exec, dependsOn: shadowJar) {
    commandLine 'docker',  'build',  '-t',  'cwds/cals-api', '.'
}

task tagDockerImage(type:Exec, dependsOn: createDockerImage) {
    commandLine 'docker',  'tag',  'cwds/cals-api',  "cwds/cals-api:$dockerTag"
}

task pushDockerLatest(type:Exec, dependsOn: createDockerImage) {
    commandLine 'docker',  'push',  'cwds/cals-api:latest'
}

task pushDockerVersionTagged(type:Exec, dependsOn: tagDockerImage) {
    commandLine 'docker',  'push',  "cwds/cals-api:$dockerTag"
}

task dropDockerImage(type:Exec) {
    commandLine 'docker',  'rmi',  "cwds/cals-api:$dockerTag"
    commandLine 'docker',  'rmi',  "cwds/cals-api:latest"

}

task publishDocker(dependsOn: [pushDockerVersionTagged, pushDockerLatest]) {
    doLast {
        println 'Published'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

processResources {
    filter(ReplaceTokens, tokens:[
            'build.version' : projectVersion,
            'build.number' : (System.getenv("BUILD_NUMBER") ?: "IDE")
    ])
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            groupId projectGroup
            artifactId rootProject.name
            version version + ((System.properties.getProperty('build') != null) ? '.' + System.properties.getProperty('build') : '')
        }
    }
    repositories {
        //mavenLocal()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }
}
